apiVersion: v1
kind: Service
metadata:
  name: echo-svc
  labels:
    app: echo
spec:
  selector:
    app: echo
  ports:
  - name: nats-client
    port: 4222
    protocol: TCP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: echo-cm
  labels:
    app: echo
data:
  requirements.txt: |
    nats-py==2.1.0
  main.py: |
    import asyncio
    import nats
    from nats.errors import TimeoutError
    import traceback


    async def process():
        client = await nats.connect("10.101.68.2:4222")
        jetstream = client.jetstream()
        print("connected to the Nats server.")
        try:
            await jetstream.add_stream(name="echo", subjects=["client", "server"])
        except:
            print(traceback.format_exc())
        print(await jetstream.stream_info("echo"))
        subscription = await jetstream.subscribe("client")
        while True:
            try:
                received = await subscription.next_msg()
                await received.ack()
                await jetstream.publish("server", received.data)
            except TimeoutError:
                pass


    if __name__ == "__main__":
        loop = asyncio.get_event_loop()
        loop.run_until_complete(process())
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: echo
  labels:
    app: echo
spec:
  selector:
    matchLabels:
      app: echo
  replicas: 3
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: echo
    spec:
      volumes:
      - name: echo-volume
        configMap:
          name: echo-cm
      containers:
      - name: echo
        image: python:3.8
        imagePullPolicy: IfNotPresent
        ports:
        - name: nats-client
          containerPort: 4222
        volumeMounts:
        - name: echo-volume
          mountPath: /app
        command:
        - "/bin/bash"
        - "-c"
        - "pip install -r /app/requirements.txt;
          python /app/main.py"
      terminationGracePeriodSeconds: 30