apiVersion: v1
kind: Service
metadata:
  name: api-server-svc
  labels:
    app: api-server
spec:
  selector:
    app: api-server
  ports:
  - name: http
    port: 8000
    protocol: TCP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-server-cm
  labels:
    app: api-server
data:
  requirements.txt: |
    fastapi==0.75.0
    pydantic==1.9.0
    uvicorn==0.17.6
    nats-py==2.1.0
  main.py: |
    from typing import Optional
    from fastapi import FastAPI
    from fastapi import WebSocket, WebSocketDisconnect
    from pydantic import BaseModel
    import nats


    class ConnectionManager:
        def __init__(self):
            self.connections = {}

        async def onConnection(self, websocket: WebSocket, uid: str):
            if uid in self.connections:
                print("uid: {id} exists.".format(id=uid))
            else:
                await websocket.accept()
                self.connections[uid] = websocket
                print("-" * 50)
                print("A new connection has been made")
                print("uid: {id}".format(id=uid))
                print("socket: {sock}".format(sock=self.connections[uid]))

        def onDisconnection(self, uid: str):
            print("-" * 50)
            print("A client disconnected")
            print("uid: {id}".format(id=uid))
            print("socket: {sock}".format(sock=self.connections[uid]))
            del self.connections[uid]

        async def publish(self, uid: str):
            data = self.connections[uid].receive_json()
            print(data)


    class MinimalData(BaseModel):
        index: int
        value0: Optional[list] = None
        value1: Optional[str] = None
        value2: Optional[int] = None
        value3: Optional[float] = None


    app = FastAPI()
    print("Starting the api server.")
    manager = ConnectionManager()
    print("Initializing the connection manager.")


    @app.get("/")
    async def root():
        return {"websocket uri": "/stream/$uid"}


    @app.post("/post/")
    async def minimalPublish(data: MinimalData):
        return data


    @app.websocket("/websocket/{uid}")
    async def streamPublish(websocket: WebSocket, uid: str):
        await manager.onConnection(websocket, uid)
        try:
            while True:
                await manager.publish(uid)
        except WebSocketDisconnect:
            manager.onDisconnection(uid)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-server
  labels:
    app: api-server
spec:
  selector:
    matchLabels:
      app: api-server
  replicas: 1
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: api-server
    spec:
      volumes:
      - name: api-server-volume
        configMap:
          name: api-server-cm
      containers:
      - name: api-server
        image: python:3.8
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8000
        volumeMounts:
        - name: api-server-volume
          mountPath: /app
        command:
        - "/bin/bash"
        - "-c"
        - "pip install -r /app/requirements.txt;
          uvicorn main:app --app-dir /app --proxy-headers --host 0.0.0.0 --port 8000"
      terminationGracePeriodSeconds: 30